# 

import numpy 
import matplotlib.pyplot as plt
import math

class Domain:
    def __init__(self, shape, e, w, tau):

        self.dim = len(shape)
        self.d = len(e)
        self.e = e
        self.w = w
        self.omega = 1. / tau

        shape.append(self.d)
        self.f = numpy.empty(shape, dtype=numpy.float64)

    def _state(self, f):
        density = sum(f)
        velocity = (f @ self.e) / density
        return density, velocity

    def _equilibrium(self, rho, u):
        ux = self.e @ u
        return rho * self.w * (1 + 3. * ux + 4.5 * ux * ux - 1.5 * numpy.dot(u, u))

    def _stream(self):
        for i, ei in enumerate(self.e):
            self.f[..., i] = numpy.roll(self.f[..., i], ei, range(self.dim))

    def _collide(self):
        fs = self.f.reshape(-1, self.d)
        for f in fs:
            rho, u = self._state(f)
            feq = self._equilibrium(rho, u)
            f -= self.omega * (f - feq)

    def initialize(self, initializer):
        shape = self.f.shape
        for i in range(shape[0]):
            x = float(i) / shape[0]
            for j in range(shape[1]):
                y = float(j) / shape[1]
                rho, u = initializer(x, y)
                self.f[i, j, :] = self._equilibrium(rho, u)

    def advance(self, steps):
        for i in range(steps):
            self._stream()
            self._collide()

    def state(self):
        shape = list(self.f.shape)
        shape[-1] = self.dim + 1
        state = numpy.empty(shape, dtype=numpy.float64)
        ss = state.reshape(-1, self.dim+1)
        fs = self.f.reshape(-1, self.d)
        for i, f in enumerate(fs):
            rho, u = self._state(f)
            ss[i, 0] = rho
            ss[i, 1:] = u

        return state

d2q9_e = numpy.array([
    [ 0,  0],
    [ 1,  0],
    [ 0,  1],
    [-1,  0],
    [ 0, -1],
    [ 1,  1],
    [-1,  1],
    [-1, -1],
    [ 1, -1]
])

d2q9_w = numpy.concatenate(([4./9.], 4 * [1./9.], 4 * [1./36]))

def shear_layer(x, y):
    vx = u0 * math.tanh((abs(y - 0.5) - 0.25) / thickness)
    vy = delta * u0 * math.sin(2. * math.pi * (x - .25))
    return 1., numpy.array([vx, vy])

Reynolds  = 500.
Mach      = 0.1
L         = [100, 100]
thickness = 0.02
delta     = 0.001

u0 = Mach / math.sqrt(3.)
nu = u0 * L[1] / Reynolds
tau = 3. * nu + .5

domain = Domain(L, d2q9_e, d2q9_w, tau)
domain.initialize(shear_layer)
for i in range(1000):
    domain.advance(10)
    state = domain.state()

rhoU = domain.state()
rho = rhoU[...,0]
Ux = rhoU[...,1]
Uy = rhoU[...,2]

# plt.quiver(Ux,Uy)
# plt.contour(rho)

dUydx = numpy.zeros((L[0],L[1]))
dUxdy = numpy.zeros((L[0],L[1]))
inext = numpy.zeros((9,L[0]))
jnext = numpy.zeros((9,L[1]))
vorticity = numpy.zeros((L[0],L[1]))

for i in range(L[0]):
    for j in range(L[1]):
        for k in range(9):
            inext[k,i] = (i + d2q9_e[k,0]+L[0])%L[0]
            jnext[k,j] = (j + d2q9_e[k,1]+L[1])%L[1]
            
            i_n = int(inext[k,i])
            j_n = int(jnext[k,j])
            
            dUydx[i,j] += Uy[i_n,j_n]*d2q9_w[k]*float(d2q9_e[k,0])
            dUxdy[i,j] += Ux[i_n,j_n]*d2q9_w[k]*float(d2q9_e[k,1])
            
        vorticity[i,j] = (dUydx[i,j]- dUxdy[i,j])*3.
        
plt.contour(vorticity)
