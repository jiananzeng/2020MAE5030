# -*- coding: utf-8 -*-
"""
Created on Sat Sep 26 15:28:08 2020

@author: Jianan
"""

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import math

class Domain:
    def __init__(self, shape, e, w, tau):

        self.dim = len(shape)
        self.d = len(e)
        self.e = e
        self.w = w
        self.omega = 1. / tau

        shape.append(self.d)
        self.f = np.empty(shape, dtype=np.float64)
        self.feq = np.empty(shape, dtype=np.float64)

    def _state(self, f):
        density = sum(f)
        velocity = (f @ self.e) / density
        return density, velocity

    def _equilibrium(self, rho, u):
        ux = self.e @ u
        # feq= rho * self.w * (1 + 3. * ux + 4.5 * ux * ux - 1.5 * np.dot(u, u))
        return rho * self.w * (1 + 3. * ux + 4.5 * ux * ux - 1.5 * np.dot(u, u))

    def _stream(self):
        shape = self.f.shape
        
        # shape = self.f.shape
        for k, ei in enumerate(self.e):
            self.f[..., k] = np.roll(self.f[..., k], ei, range(self.dim))
        # diffuse boundary condition
        # for i in range(shape[0]):
        #     for j in range(shape[1]):
        #         if j == 0:
        #             self.f[i,j,2]=self.feq[i,j,2]
        #             self.f[i,j,6]=self.feq[i,j,6]
        #             self.f[i,j,5]=self.feq[i,j,5]
        #         elif j == shape[1]-1:
        #             self.f[i,j,4]=self.feq[i,j,4]
        #             self.f[i,j,7]=self.feq[i,j,7]
        #             self.f[i,j,8]=self.feq[i,j,8]
        
        # bounce back boundary condition
        for i in range(shape[0]):
            for j in range(shape[1]):
                if j == 0:
                    self.f[i,j,2]=self.f[i,j,4]
                    self.f[i,j,5]=self.f[i,j,7]
                    self.f[i,j,6]=self.f[i,j,8]
                elif j == shape[1]-1:
                    self.f[i,j,4]=self.f[i,j,2]
                    self.f[i,j,7]=self.f[i,j,5]
                    self.f[i,j,8]=self.f[i,j,6]

    def _collide(self):
        fs = self.f.reshape(-1, self.d)
        for f in fs:
            rho, u = self._state(f)
            feq = self._equilibrium(rho, u)
            f -= self.omega * (f - feq)
        
        shape = self.f.shape
        for k in range(shape[2]):
            self.f[...,k]=self.f[...,k]+self.w[k] * self.e[k] @ Force

    def initialize(self, initializer):
        shape = self.f.shape
        for i in range(shape[0]):
            x = float(i) / shape[0]
            for j in range(shape[1]):
                y = float(j) / shape[1]
                rho, u = initializer(x, y)
                self.f[i, j, :] = self._equilibrium(rho, u)
                self.feq[i, j, :]=self.f[i, j, :]
        return self.feq

    def advance(self, steps):
        for i in range(steps):
            self._stream()
            self._collide()

    def state(self):
        shape = list(self.f.shape)
        shape[-1] = self.dim + 1
        state = np.empty(shape, dtype=np.float64)
        ss = state.reshape(-1, self.dim+1)
        fs = self.f.reshape(-1, self.d)
        for i, f in enumerate(fs):
            rho, u = self._state(f)
            ss[i, 0] = rho
            ss[i, 1:] = u
        return state
                  
    def exact(self,y):
        u_ex=(y[0]**2-y**2)/4
        return u_ex
    
d2q9_e = np.array([
    [ 0,  0],
    [ 1,  0],
    [ 0,  1],
    [-1,  0],
    [ 0, -1],
    [ 1,  1],
    [-1,  1],
    [-1, -1],
    [ 1, -1]
])

d2q9_w = np.concatenate(([4./9.], 4 * [1./9.], 4 * [1./36]))

def pf2d(x, y):
    vx = 0
    vy = 0
    return 1., np.array([vx, vy])

Reynolds  = 500.
Mach      = 0.1
L         = [50, 20]
thickness = 0.02
delta     = 0.001
n_max     = 3000
err_max       = 1e-5

u0 = Mach / math.sqrt(3.)
nu = u0 * L[1] / Reynolds
tau = 3. * nu + .5
ForceX=1e-6
ForceY=0.
Force=np.array([ForceX, ForceY])

domain = Domain(L, d2q9_e, d2q9_w, tau)
domain.initialize(pf2d)
state_old=domain.state()
i=0
err=1


while (i<n_max and err>err_max ):
    i=i+1
    domain.advance(100)
    state = domain.state()
    err=max(state_old[25,:,1]/state[25,:,1]-1)
    state_old=state
    
    if i % 10 == 0:
        print(i, err)
  
# for i in range(n_max):
#     domain.advance(100)
#     state = domain.state()
#     if max(state[25,:,1]-state_old[25,:,1]) >= err:    
#         break
#     else
#         state_old=state
    
#     if i % 10 == 0:
#         print(i)
        
    
y=np.linspace(-0.5,0.5,state.shape[1])
u_ex=domain.exact(y)
ux=state[25,:,1]
    # plt.imsave("w%d.png"(i),ux,cmap=cm.gray,origin='lower')

# plt.plot(y,ux,c='red',label="Exact")

plt.title('Poiseuille Flow')
plt.scatter(y,u_ex,color='red',marker=',',label="Exact")
plt.plot(y,9.5*state[25,:,1],color='blue',label="D2Q9")
plt.legend()
plt.xlabel('Y')
plt.ylabel('Ux')
plt.show()

